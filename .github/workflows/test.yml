---
name: Run tests
on:
  pull_request: ~
  push:
    branches:
      - main

jobs:
  pnpm-tests:
    name: pnpm test
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
      - uses: pnpm/action-setup@41ff72655975bd51cab0327fa583b6e92b6d3061 # v4.2.0
      - uses: actions/setup-node@2028fbc5c25fe9cf00d9f06a71cc4710d4507903 # v6
        with:
          node-version-file: .nvmrc
          cache: "pnpm"
      - run: pnpm install
      - run: pnpm test

  end-to-end-tests:
    name: end-to-end-tests
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        # https://github.com/rhysd/action-setup-vim/blob/master/action.yml
        neovim_version: ["nightly", "stable"]
    env:
      MISE_ENV: ci
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
      - uses: pnpm/action-setup@41ff72655975bd51cab0327fa583b6e92b6d3061 # v4.2.0
      - uses: actions/setup-node@2028fbc5c25fe9cf00d9f06a71cc4710d4507903 # v6
        with:
          node-version-file: .nvmrc
          cache: "pnpm"

      - name: install dependencies and build
        run: pnpm install && pnpm build

      - uses: jdx/mise-action@be3be2260bc02bc3fbf94c5e2fed8b7964baf074 # v3.4.0
        with:
          install: false

      - name: Install tools
        shell: bash
        run: |
          mkdir -p "$HOME/.local/bin"
          # make the tools available for subsequent steps
          echo "$(pwd)/bin" >> "$GITHUB_PATH"
          curl --silent --location \
              https://raw.githubusercontent.com/houseabsolute/ubi/master/bootstrap/bootstrap-ubi.sh |
              TARGET="$HOME/.local/bin" sh

          ubi --project mikefarah/yq

          VERSION=$(yq '.tools."ubi:EmmyLuaLs/emmylua-analyzer-rust".version' mise.toml)
          ubi --project EmmyLuaLs/emmylua-analyzer-rust --tag "$VERSION" --exe emmylua_ls --matching-regex "^emmylua_ls"

          mise install cowsay
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - uses: rhysd/action-setup-vim@387ddb86526bf67490a750c5e481fdecdf3ef4f6 # v1
        with:
          neovim: true
          version: ${{ matrix.neovim_version }}

      - run: |
          cd packages/integration-tests
          pnpm i # make sure the tui command is found

          # NVIM_APPNAME=nvim is the default, but spelled out here for clarity
          NVIM_APPNAME=nvim pnpm tui neovim prepare
          NVIM_APPNAME=nvim_alt pnpm tui neovim prepare

      - name: Test that tui neovim exec works
        run: |
          # test that tui neovim exec works
          pnpm tui neovim exec version

      - name: Test that tui neovim exec warns for missing NVIM_APPNAME
        run: |
          # allow this test to fail
          set +e
          # test that tui neovim exec works
          NVIM_APPNAME=doesnotexist pnpm tui neovim exec version 2>&1 | tee output.txt
          # make sure the exit code is non-zero
          test $? -ne 0 || (echo "Expected non-zero exit code" && exit 1)
          grep "Please set NVIM_APPNAME to one of the configured names" output.txt || (echo "Did not find expected warning" && exit 1)

      # need to work around https://github.com/cypress-io/github-action/issues/1246
      - run: pnpm --filter integration-tests exec cypress install

      - name: Cypress run
        uses: cypress-io/github-action@e65cba2e7319696fc0fdc4d5a319b737aec4ba1c # v6.10.3
        with:
          command: |
            pnpm tui run

      - uses: actions/upload-artifact@330a01c490aca151604b8cf639adc76d48f6c5d4 # v5.0.0
        # add the line below to store screenshots only on failures
        # if: failure()
        if: failure()
        with:
          name: cypress-screenshots
          path: packages/integration-tests/cypress/screenshots
          if-no-files-found: ignore # 'warn' or 'error' are also available, defaults to `warn`
