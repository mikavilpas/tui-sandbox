import { createCypressSupportFileContents } from "./contents.js"

it("should return the expected contents", async () => {
  // this test is to help track breaking changes with releases
  expect(await createCypressSupportFileContents()).toMatchInlineSnapshot(`
    "/// <reference types="cypress" />
    //
    // This file is autogenerated by tui-sandbox. Do not edit it directly.
    //
    import type { StartNeovimGenericArguments } from "@tui-sandbox/library/dist/src/server/types"
    import type { OverrideProperties } from "type-fest"
    import type { MyTestDirectory, MyTestDirectoryFile } from "../../MyTestDirectory"

    export type NeovimContext = {
      contents: MyTestDirectory
      rootPathAbsolute: string
    }

    declare global {
      interface Window {
        startNeovim(startArguments?: MyStartNeovimServerArguments): Promise<NeovimContext>
      }
    }

    type MyStartNeovimServerArguments = OverrideProperties<
      StartNeovimGenericArguments,
      {
        filename?: MyTestDirectoryFile | { openInVerticalSplits: MyTestDirectoryFile[] }
        // NOTE: right now you need to make sure the config-modifications directory exists in your test directory
        startupScriptModifications?: Array<keyof MyTestDirectory["config-modifications"]["contents"]>
      }
    >

    Cypress.Commands.add("startNeovim", (startArguments?: MyStartNeovimServerArguments) => {
      cy.window().then(async win => {
        return await win.startNeovim(startArguments)
      })
    })

    Cypress.Commands.add("typeIntoTerminal", (text: string, options?: Partial<Cypress.TypeOptions>) => {
      // the syntax for keys is described here:
      // https://docs.cypress.io/api/commands/type
      cy.get("textarea").focus().type(text, options)
    })

    before(function () {
      // disable Cypress's default behavior of logging all XMLHttpRequests and
      // fetches to the Command Log
      // https://gist.github.com/simenbrekken/3d2248f9e50c1143bf9dbe02e67f5399?permalink_comment_id=4615046#gistcomment-4615046
      cy.intercept({ resourceType: /xhr|fetch/ }, { log: false })
    })

    declare global {
      namespace Cypress {
        interface Chainable {
          startNeovim(args?: MyStartNeovimServerArguments): Chainable<NeovimContext>
          typeIntoTerminal(text: string, options?: Partial<Cypress.TypeOptions>): Chainable<void>
        }
      }
    }
    "
  `)
})
